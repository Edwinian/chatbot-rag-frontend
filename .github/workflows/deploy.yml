name: Docker Deploy React to EC2

on:
  push:
    branches: [master]

env:
  DOCKER_IMAGE: react-app
  DOCKER_COMPOSE_FILE: docker-compose.yml
  EC2_DOCKER_DIR: /home/ubuntu/react-app
  NGINX_CONTAINER: react-nginx

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: ${{ secrets.EC2_HOST }}

      - name: Initialize or Update Git Repository
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            # Log the connection values for debugging
            echo "Attempting SSH connection to: ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}"
            echo "EC2_DOCKER_DIR: ${{ env.EC2_DOCKER_DIR }}"
            echo "Github repository: ${{ github.repository }}"
            
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
              set -e
              set -x
              
              echo "Starting Git repository setup in ${{ env.EC2_DOCKER_DIR }}"
              
              # Create directory with proper permissions
              mkdir -p ${{ env.EC2_DOCKER_DIR }}
              cd ${{ env.EC2_DOCKER_DIR }}
              
              if [ -d .git ]; then
                echo "Updating existing repository..."
                git fetch origin
                git checkout master
                git reset --hard origin/master
              else
                echo "Cloning new repository..."
                git clone https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_PAT }}@github.com/${{ github.repository }} .
                git checkout master
              fi
              
              echo "Git repository setup completed successfully"
            '

      - name: Create and Secure .env File
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
              set -e
              set -x
              
              echo "Creating .env file in ${{ env.EC2_DOCKER_DIR }}"
              cd ${{ env.EC2_DOCKER_DIR }}
              
              # Create .env file
              echo "REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}" > .env
              
              # Set proper permissions
              chmod 600 .env
              
              echo ".env file creation and permissions set"
            '

      - name: Create Dockerfile for React App
        run: |
          cat > Dockerfile << 'EOF'
          # Build stage
          FROM node:20-alpine as build
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY . .
          RUN npm run build

          # Production stage
          FROM nginx:alpine
          COPY --from=build /app/build /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF

          cat > nginx.conf << 'EOF'
          server {
              listen 80;
              server_name localhost;
              root /usr/share/nginx/html;
              index index.html;
              
              location / {
                  try_files $uri $uri/ /index.html;
              }
              
              location /api {
                  proxy_pass http://backend:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
          }
          EOF

          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            frontend:
              build:
                context: .
                dockerfile: Dockerfile
              image: react-app
              container_name: react-frontend
              restart: unless-stopped
              ports:
                - "80:80"
              networks:
                - app-network
              depends_on:
                - backend

            backend:
              image: fastapi-app  # This should match your backend image name
              container_name: fastapi-backend
              restart: unless-stopped
              ports:
                - "8000:8000"
              env_file:
                - .env
              networks:
                - app-network

          networks:
            app-network:
              driver: bridge
          EOF

      - name: Copy Docker files to EC2
        run: |
          scp -o StrictHostKeyChecking=no \
            Dockerfile nginx.conf docker-compose.yml \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ env.EC2_DOCKER_DIR }}/

      - name: Free Disk Space
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            set -e
            set -x
            
            echo "Cleaning up disk space..."
            sudo apt-get clean
            sudo docker system prune -a -f --volumes || true
            sudo rm -rf /var/lib/apt/lists/*
            sudo journalctl --vacuum-size=50M
            
            echo "Disk space cleanup completed"
          '

      - name: Deploy React Docker Container
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
              set -e
              set -x
              
              echo "Starting Docker deployment in ${{ env.EC2_DOCKER_DIR }}"
              cd ${{ env.EC2_DOCKER_DIR }}
              
              # Check disk space
              echo "Checking disk space..."
              if ! df -h / | grep -q "[0-9]G"; then
                echo "Insufficient disk space"
                exit 1
              fi
              
              # Stop and remove existing containers
              echo "Cleaning up existing containers..."
              docker-compose down || true
              
              # Remove old images to free space
              echo "Removing old Docker images..."
              docker image prune -a -f || true
              
              # Build and start containers
              echo "Building and starting Docker containers..."
              docker-compose up -d --build
              
              # Wait for containers to be healthy
              echo "Waiting for containers to start..."
              sleep 10
              
              # Check container status
              echo "Checking container status..."
              if ! docker ps --filter "name=react-frontend" --format "{{.Status}}" | grep -q "Up"; then
                echo "Frontend container failed to start"
                docker logs react-frontend
                exit 1
              fi
              
              # Test the application
              echo "Testing application..."
              if ! curl -f -s http://localhost > /dev/null; then
                echo "Application test failed"
                docker logs react-frontend
                exit 1
              fi
              
              echo "Docker deployment completed successfully"
            '

      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            set -x
            echo "Verifying deployment..."
            docker ps
            docker-compose logs --tail=20
            curl -I http://localhost
          '